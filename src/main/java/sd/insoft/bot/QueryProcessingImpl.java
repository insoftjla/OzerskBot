package sd.insoft.bot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import sd.insoft.model.Company;
import sd.insoft.model.TelegramUser;
import sd.insoft.model.Weather;
import sd.insoft.repo.CompanyRepository;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import sd.insoft.repo.WeatherRepository;

import java.util.ArrayList;
import java.util.List;

@Component
@PropertySource("classpath:httpQuery.properties")
public class QueryProcessingImpl implements QueryProcessing {

    @Value("${yandex.maps.query.drugstore}")
    String drugShop;
    @Value("${yandex.maps.query.shop}")
    String shop;
    @Value("${yandex.maps.query.education}")
    String education;
    @Value("${city.name}")
    String cityName;

    Logger log = LoggerFactory.getLogger(QueryProcessingImpl.class);

    StringBuilder stringBuilder;

    private ChatBot chatBot;
    private TelegramUser user;
    private Message message;


    private final ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
    private final WeatherRepository weatherRepository;
    private final CompanyRepository companyRepository;

    public QueryProcessingImpl(
            WeatherRepository weatherRepository,
            CompanyRepository companyRepository) {
        this.weatherRepository = weatherRepository;
        this.companyRepository = companyRepository;
    }

    @Override
    public void processMessage(BotContext context) {
        this.chatBot = context.getChatBot();
        this.user = context.getUser();
        this.message = context.getMessage();
        SendMessage sendMessage;

        sendMessage = checkState() ? dialogCmd() : firstCmd();

        sendMsn(sendMessage);
    }

    private SendMessage startCmd() {
        stringBuilder.append(String.format("–ü—Ä–∏–≤–µ—Ç, %s!üòä\n", user.getFirstName()));
        stringBuilder.append("–Ø –ø–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –ª—é–±–∏–º–æ–º –≥–æ—Ä–æ–¥–µ \uD83D\uDD0E\n");
        stringBuilder.append("–ù–∞–∂–º–∏ ‚ùì–ü–æ–º–æ—â—å —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π\n");

        return textMsn(stringBuilder.toString());
    }

    private SendMessage defaultMsn() {
        return textMsn("–Ø –º–æ–ª–æ–¥–æ–π –±–æ—Ç üë∂ –∏ –¥–∏–∞–ª–æ–≥–∏ –µ—â–µ –≤–µ—Å—Ç–∏ –Ω–µ –º–æ–≥—É, –Ω–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üë® —Å–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏");
    }

    private SendMessage weatherCmd() {

        Weather weather = weatherRepository.getWeather();
        log.debug(weather.toString());

        stringBuilder.append(String.format("üå§ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤ –û–∑—ë—Ä—Å–∫–µ\n\n"));
        stringBuilder.append(String.format("üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %s ‚ÑÉ\n\n", (int) weather.getTemp()));
        stringBuilder.append(String.format("üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: %s%%\n\n", weather.getHumidity()));
        stringBuilder.append(String.format("üåè –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: %s –º–º —Ä—Ç.—Å—Ç.\n\n", weather.getPressure()));
        stringBuilder.append(String.format("üå¨ –í–µ—Ç–µ—Ä: %s –º/—Å", (int) weather.getWindSpeed()));
        return textMsn(stringBuilder.toString());
    }

    private SendMessage companyCmd(String query) {
        List<Company> companyList = companyRepository.getAllCompany(query);
        companyList.forEach(company -> {
            String tmp;
            if ((tmp = company.getName()) != null) stringBuilder.append("\uD83C\uDFEC ").append(tmp).append("\n");
            if ((tmp = company.getDescription()) != null)
                stringBuilder.append("\uD83C\uDFE0 ").append(tmp).append("\n");
            if ((tmp = company.getHoursText()) != null) stringBuilder.append("‚è∞ ").append(tmp).append("\n");
            if ((tmp = company.getPhone()) != null && !tmp.isEmpty())
                stringBuilder.append("‚òéÔ∏è ").append(tmp).append("\n");
            if ((tmp = company.getUrl()) != null) stringBuilder.append("–°–∞–π—Ç: ").append(tmp).append("\n");
            stringBuilder.append("\n");

        });
        return textMsn(stringBuilder.toString());
    }

    private SendMessage helpCmd(){
        stringBuilder.append("–ò—Ç–∞–∫. –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ —è —Ö–æ—á—É —Å—Ç–∞—Ç—å —á–µ–ª–æ–≤–µ—á–Ω–µ–µ, —è –≤—Å–µ –µ—â–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ ü§ñ –¢—ã –º–æ–∂–µ—à—å –æ–±–ª–µ–≥—á–∏—Ç—å –º–Ω–µ —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ –Ω–∞—É—á–∏—à—å—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –º–æ–µ–º —è–∑—ã–∫–µ üíÅ\n\n");
        stringBuilder.append("–ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ \uD83D\uDC47\n\n");
        stringBuilder.append("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–¥–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —ç–Ω—Ç—É–∑–∏–∞–∑–º–µ –º–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ –ø–æ—ç—Ç–æ–º—É –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ª—é–±–æ–π –ø–æ–º–æ—â–∏ \uD83D\uDCB6\n\n");
        stringBuilder.append("–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫–æ–π –±—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç—ã –¥–æ–±–∞–≤–∏–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ \uD83D\uDC4D\n");
        stringBuilder.append("–ê —Ç–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ÅâÔ∏è \uD83D\uDD96\n\n");
        stringBuilder.append("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n");
        stringBuilder.append("\uD83D\uDCE8 email: insoftjla@gmail.com\n");
        stringBuilder.append("telegram: @insoftjla\n");
        return textMsn(stringBuilder.toString());
    }

    private SendMessage textMsn(String text) {
        return new SendMessage()
                .setChatId(message.getChatId())
                .setText(text)
                .setReplyMarkup(replyKeyboardMarkup)
                .disableWebPagePreview();
    }

    private boolean checkState() {
        Integer stateId = user.getStateId();
        return !(stateId == null || stateId < 1);
    }

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    private SendMessage firstCmd() {
        SendMessage sendMessage = defaultMsn();

        setMainMenu();

        stringBuilder = new StringBuilder();
        String cmd = message.hasText() ? message.getText().split("%")[0] : "";
        switch (cmd) {
            case "/start":
                sendMessage = startCmd();
                break;
            case "/toall":
                if (!user.getAdmin()) break;
                sendToAll();
                break;
            case "\uD83C\uDF24 –ü–æ–≥–æ–¥–∞":
                sendMessage = weatherCmd();
                break;
            case "\uD83D\uDC8A –ê–ø—Ç–µ–∫–∏":
                stringBuilder.append("\uD83D\uDE91 –í—ã–∑–æ–≤ —Å–∫–æ—Ä–æ–π –ø–æ–º–æ—â–∏ - 112\n\n");
                sendMessage = companyCmd(drugShop);
                break;
            case "\uD83D\uDED2 –ú–∞–≥–∞–∑–∏–Ω—ã":
                sendMessage = companyCmd(shop);
                break;
            case "\uD83C\uDFEB –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
                sendMessage = companyCmd(education);
                break;
            case "‚ùì–ü–æ–º–æ—â—å":
                sendMessage = helpCmd();
                break;
        }
        return sendMessage;
    }

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    private SendMessage dialogCmd() {
        return null;
    }

    public void sendMsn(SendMessage sendMessage) {
        try {
            chatBot.execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("[sendMsn] Exception:{}", e);
        }

    }

    // –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –±–∞–∑–µ;
    public void sendToAll() {

        List<TelegramUser> allUsers = chatBot.getAllUsers();
        List<SendMessage> sendMessages = new ArrayList<>();
        String text = message
                .getText()
                .substring(message.getText().indexOf("%") + 1);
        allUsers.forEach(user -> {
            sendMessages.add(new SendMessage()
                    .setChatId(user.getChatId())
                    .setText(text));
        });
        sendMessages.forEach(this::sendMsn);
    }

    private void setMainMenu() {
        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow firstRow = new KeyboardRow();
        KeyboardRow secondRow = new KeyboardRow();

        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setSelective(true);

        firstRow.add("üå§ –ü–æ–≥–æ–¥–∞");
        firstRow.add("‚ùì–ü–æ–º–æ—â—å");
        secondRow.add("\uD83D\uDC8A –ê–ø—Ç–µ–∫–∏");
        secondRow.add("\uD83D\uDED2 –ú–∞–≥–∞–∑–∏–Ω—ã");
        secondRow.add("üè´ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ");
        keyboardRows.add(firstRow);
        keyboardRows.add(secondRow);
        replyKeyboardMarkup.setKeyboard(keyboardRows);
    }
}
